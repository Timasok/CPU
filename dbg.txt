# 0 "./CPU/src/funcs_CPU.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "./CPU/src/funcs_CPU.cpp"
# 24 "./CPU/src/funcs_CPU.cpp"
const int REG_POISON = -1;

# 1 "./CPU/include/defines_CPU.h" 1
# 27 "./CPU/src/funcs_CPU.cpp" 2

bool checkSignature(CPU_info * cpu, FILE * asm_source)
{
    assert(cpu != nullptr);
    assert(asm_source != nullptr);
    fread(&cpu->signature, sizeof(int), 1, asm_source);

    fprintf(stderr, "SIGNATURE = %s\n", &(cpu->signature));

    int correctSignature = 'C' + 'P'*256;

    bool matchSignature = (correctSignature == cpu->signature);

    return matchSignature;

}

int CPU_Ctor(CPU_info * cpu, FILE * asm_source)
{
    fprintf(stderr, "Compiled nicely -line: %d file: %s func: %s\n", 46, "./CPU/src/funcs_CPU.cpp", __FUNCTION__);

    cpu->code_of_error = 0;

    if (checkSignature(cpu, asm_source) == false)
    {
        cpu->code_of_error |= CPU_ERROR_INCORRECT_SIGNATURE;
        return EXIT_FAILURE;
    }

    fprintf(stderr, "Compiled nicely -line: %d file: %s func: %s\n", 56, "./CPU/src/funcs_CPU.cpp", __FUNCTION__);
    fread(&cpu->quantity, sizeof(int), 1, asm_source);
    fprintf(stderr, "Compiled nicely -line: %d file: %s func: %s\n", 58, "./CPU/src/funcs_CPU.cpp", __FUNCTION__);
    fread(&cpu->number_of_comands, sizeof(int), 1, asm_source);
    fprintf(stderr, "Compiled nicely -line: %d file: %s func: %s\n", 60, "./CPU/src/funcs_CPU.cpp", __FUNCTION__);
    cpu->code = (int *)calloc(cpu->quantity, sizeof(int));
    fread(cpu->code, sizeof(int), cpu->quantity, asm_source);

    stackCtor(cpu->stack, cpu->number_of_comands);
    cpu->ip = 0;
    cpu->log_file = fopen("cpu_log.txt", "w+");
    setvbuf(cpu->log_file, NULL, _IONBF, 0);

    return EXIT_SUCCESS;
}







int operateArgs(CPU_info *cpu, elem_t *argPtr)
{
    elem_t tmp_arg = 0;
    int reg_idx = REG_POISON;
    bool detectedPopToImmed = false;
    int num_of_comand = cpu->code[cpu->ip - 1];

    switch(num_of_comand & 0x1F)
    {

# 1 "./inc/comands.h" 1
case 1: { if (num_of_comand & IMMED_MASK) { tmp_arg = cpu->code[cpu->ip++]; } else if(num_of_comand & REG_MASK) { int reg_idx = cpu->code[cpu->ip++]; tmp_arg = cpu->Reg[reg_idx]; }else { fprintf(stderr, "Error: WRONG PUSH MASK: -line: %d file: %s func: %s\n", 52, "./inc/comands.h", __FUNCTION__); cpu->code_of_error |= CPU_ERROR_INCORRECT_PUSH_MASK; return CPU_ERROR_INCORRECT_PUSH_MASK; } if(num_of_comand & MEM_MASK) { operateWithRam(cpu, tmp_arg, argPtr); }else{ *argPtr = tmp_arg; } } break;
# 70 "./inc/comands.h"
case 2: { if(num_of_comand & REG_MASK) { int reg_idx = cpu->code[cpu->ip++]; tmp_arg = cpu->Reg[reg_idx]; }else if (num_of_comand & IMMED_MASK) { tmp_arg = cpu->code[cpu->ip++]; detectedPopToImmed = true; }else { fprintf(stderr, "Error: WRONG POP MASK: -line: %d file: %s func: %s\n", 122, "./inc/comands.h", __FUNCTION__); cpu->code_of_error |= CPU_ERROR_INCORRECT_POP_MASK; return CPU_ERROR_INCORRECT_POP_MASK; } if(num_of_comand & MEM_MASK) { detectedPopToImmed = false; operateWithRam(cpu, tmp_arg, argPtr); }else{ *argPtr = tmp_arg; } if (detectedPopToImmed == true) { fprintf(stderr, "Error: CANNOT POP into IMMED  -line: %d file: %s func: %s\n", 142, "./inc/comands.h", __FUNCTION__); cpu->code_of_error |= CPU_ERROR_ATTEMPT_TO_POP_INTO_IMMED; } } break;
# 149 "./inc/comands.h"
case 3: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped + second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "+", first_popped); } break;







case 4: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped - second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "-", first_popped); } break;







case 5: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped * second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "*", first_popped); } break;







case 6: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped / second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "/", first_popped); } break;
# 182 "./inc/comands.h"
case 7: { do { if (stackPop(&cpu->stack, &out) == EXIT_FAILURE) { break; } } while (0); do { fprintf(cpu->log_file, "OUT: = %d", *&out); } while (0); } break;






case 8: { elem_t tmp; do { if (stackPop(&cpu->stack, &tmp) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, tmp); } while (0); do { stackPush(&cpu->stack, tmp); } while (0); } break;
# 198 "./inc/comands.h"
case 9: { } break;

case 10: { } break;

case 11: { do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); } break;
# 229 "./inc/comands.h"
case 12: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped < first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } break;
# 256 "./inc/comands.h"
case 13: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped <= first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } break;
# 282 "./inc/comands.h"
case 14: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped > first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } break;
# 308 "./inc/comands.h"
case 15: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped >= first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } break;
# 334 "./inc/comands.h"
case 16: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped == first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } break;
# 360 "./inc/comands.h"
case 17: { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped != first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } break;
# 386 "./inc/comands.h"
case 18: { } break;

case 0: { return 0; } break;
# 89 "./CPU/src/funcs_CPU.cpp" 2

        default:
            printf("Go fuck yourself with such args");

    }
    if (num_of_comand & CMD_PUSH)
    {
        stackPush(&cpu->stack, *argPtr);


    } else if (num_of_comand & CMD_POP)
    {
        stackPop(&cpu->stack, argPtr);


    }

    return EXIT_SUCCESS;

}

int operateWithRam(CPU_info *cpu, elem_t tmp_arg, elem_t *argPtr)
{
    fprintf(stderr, "*****************************************************************************\n");

    sleep(0.5);

    if (cpu->RAM[tmp_arg] != NULL)
    {
        *argPtr = cpu->RAM[tmp_arg];
        return EXIT_SUCCESS;

    } else
    {
        fprintf(stderr, "RAM[%d] is empty\n", tmp_arg);
        cpu->code_of_error |= CPU_ERROR_ACCESSING_TO_EMPTY_RAM;
        return CPU_ERROR_ACCESSING_TO_EMPTY_RAM;

    }

}
# 156 "./CPU/src/funcs_CPU.cpp"
int process(CPU_info * cpu)
{

    while (cpu->ip < cpu->quantity)
    {
        int num_of_comand = cpu->code[cpu->ip];
        elem_t first_popped = 0, second_popped = 0;
        elem_t out = 0;
        elem_t actual_arg;

        fprintf(stderr,"NUMBER OF PROCESSING COMAND %d ip - %d \n", num_of_comand, cpu->ip);

        switch(num_of_comand & 0x1F)
        {
# 1 "./inc/comands.h" 1
case 1: cpu->ip++; if(1 == CMD_PUSH || 1 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { if (num_of_comand & IMMED_MASK) { tmp_arg = cpu->code[cpu->ip++]; } else if(num_of_comand & REG_MASK) { int reg_idx = cpu->code[cpu->ip++]; tmp_arg = cpu->Reg[reg_idx]; }else { fprintf(stderr, "Error: WRONG PUSH MASK: -line: %d file: %s func: %s\n", 52, "./inc/comands.h", __FUNCTION__); cpu->code_of_error |= CPU_ERROR_INCORRECT_PUSH_MASK; return CPU_ERROR_INCORRECT_PUSH_MASK; } if(num_of_comand & MEM_MASK) { operateWithRam(cpu, tmp_arg, argPtr); }else{ *argPtr = tmp_arg; } } } if (!(1 == CMD_DMP || 1 == CMD_HLT || 1 == CMD_IN || 1 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 70 "./inc/comands.h"
case 2: cpu->ip++; if(2 == CMD_PUSH || 2 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { if(num_of_comand & REG_MASK) { int reg_idx = cpu->code[cpu->ip++]; tmp_arg = cpu->Reg[reg_idx]; }else if (num_of_comand & IMMED_MASK) { tmp_arg = cpu->code[cpu->ip++]; detectedPopToImmed = true; }else { fprintf(stderr, "Error: WRONG POP MASK: -line: %d file: %s func: %s\n", 122, "./inc/comands.h", __FUNCTION__); cpu->code_of_error |= CPU_ERROR_INCORRECT_POP_MASK; return CPU_ERROR_INCORRECT_POP_MASK; } if(num_of_comand & MEM_MASK) { detectedPopToImmed = false; operateWithRam(cpu, tmp_arg, argPtr); }else{ *argPtr = tmp_arg; } if (detectedPopToImmed == true) { fprintf(stderr, "Error: CANNOT POP into IMMED  -line: %d file: %s func: %s\n", 142, "./inc/comands.h", __FUNCTION__); cpu->code_of_error |= CPU_ERROR_ATTEMPT_TO_POP_INTO_IMMED; } } } if (!(2 == CMD_DMP || 2 == CMD_HLT || 2 == CMD_IN || 2 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 149 "./inc/comands.h"
case 3: cpu->ip++; if(3 == CMD_PUSH || 3 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped + second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "+", first_popped); } } if (!(3 == CMD_DMP || 3 == CMD_HLT || 3 == CMD_IN || 3 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;







case 4: cpu->ip++; if(4 == CMD_PUSH || 4 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped - second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "-", first_popped); } } if (!(4 == CMD_DMP || 4 == CMD_HLT || 4 == CMD_IN || 4 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;







case 5: cpu->ip++; if(5 == CMD_PUSH || 5 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped * second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "*", first_popped); } } if (!(5 == CMD_DMP || 5 == CMD_HLT || 5 == CMD_IN || 5 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;







case 6: cpu->ip++; if(6 == CMD_PUSH || 6 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, second_popped / second_popped); } while (0); fprintf(stderr, "%d %s %d\n", second_popped, "/", first_popped); } } if (!(6 == CMD_DMP || 6 == CMD_HLT || 6 == CMD_IN || 6 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 182 "./inc/comands.h"
case 7: cpu->ip++; if(7 == CMD_PUSH || 7 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &out) == EXIT_FAILURE) { break; } } while (0); do { fprintf(cpu->log_file, "OUT: = %d", *&out); } while (0); } } if (!(7 == CMD_DMP || 7 == CMD_HLT || 7 == CMD_IN || 7 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;






case 8: cpu->ip++; if(8 == CMD_PUSH || 8 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { elem_t tmp; do { if (stackPop(&cpu->stack, &tmp) == EXIT_FAILURE) { break; } } while (0); do { stackPush(&cpu->stack, tmp); } while (0); do { stackPush(&cpu->stack, tmp); } while (0); } } if (!(8 == CMD_DMP || 8 == CMD_HLT || 8 == CMD_IN || 8 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 198 "./inc/comands.h"
case 9: cpu->ip++; if(9 == CMD_PUSH || 9 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { } } if (!(9 == CMD_DMP || 9 == CMD_HLT || 9 == CMD_IN || 9 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;

case 10: cpu->ip++; if(10 == CMD_PUSH || 10 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { } } if (!(10 == CMD_DMP || 10 == CMD_HLT || 10 == CMD_IN || 10 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;

case 11: cpu->ip++; if(11 == CMD_PUSH || 11 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); } } if (!(11 == CMD_DMP || 11 == CMD_HLT || 11 == CMD_IN || 11 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 229 "./inc/comands.h"
case 12: cpu->ip++; if(12 == CMD_PUSH || 12 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped < first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } } if (!(12 == CMD_DMP || 12 == CMD_HLT || 12 == CMD_IN || 12 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 256 "./inc/comands.h"
case 13: cpu->ip++; if(13 == CMD_PUSH || 13 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped <= first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } } if (!(13 == CMD_DMP || 13 == CMD_HLT || 13 == CMD_IN || 13 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 282 "./inc/comands.h"
case 14: cpu->ip++; if(14 == CMD_PUSH || 14 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped > first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } } if (!(14 == CMD_DMP || 14 == CMD_HLT || 14 == CMD_IN || 14 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 308 "./inc/comands.h"
case 15: cpu->ip++; if(15 == CMD_PUSH || 15 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped >= first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } } if (!(15 == CMD_DMP || 15 == CMD_HLT || 15 == CMD_IN || 15 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 334 "./inc/comands.h"
case 16: cpu->ip++; if(16 == CMD_PUSH || 16 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped == first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } } if (!(16 == CMD_DMP || 16 == CMD_HLT || 16 == CMD_IN || 16 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 360 "./inc/comands.h"
case 17: cpu->ip++; if(17 == CMD_PUSH || 17 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { do { if (stackPop(&cpu->stack, &first_popped) == EXIT_FAILURE) { break; } } while (0); do { if (stackPop(&cpu->stack, &second_popped) == EXIT_FAILURE) { break; } } while (0); do { if (second_popped != first_popped){ do { if (cpu->code[cpu->ip] < 0 || cpu->code[cpu->ip] >= cpu->quantity) fprintf(stderr, "LABEL POINTS OUTDOORS ip = %d", cpu->ip); cpu->ip = cpu->code[cpu->ip++]; } while (0); }else { cpu->ip++; } } while (0); } } if (!(17 == CMD_DMP || 17 == CMD_HLT || 17 == CMD_IN || 17 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 386 "./inc/comands.h"
case 18: cpu->ip++; if(18 == CMD_PUSH || 18 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { } } if (!(18 == CMD_DMP || 18 == CMD_HLT || 18 == CMD_IN || 18 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;

case 0: cpu->ip++; if(0 == CMD_PUSH || 0 == CMD_POP) { operateArgs(cpu, &actual_arg); }else{ { return 0; } } if (!(0 == CMD_DMP || 0 == CMD_HLT || 0 == CMD_IN || 0 == CMD_JMP)) { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 1); }else { dump_CMD_CPU(cpu->ip - 1, cpu->code[cpu->ip - 1], cpu, 0); } break;
# 171 "./CPU/src/funcs_CPU.cpp" 2

        }

    }

    return EXIT_SUCCESS;
}



int CPU_Dtor(CPU_info * cpu)
{
    free(cpu->code);
    return EXIT_SUCCESS;
}

# 1 "./CPU/include/undefines_CPU.h" 1
# 188 "./CPU/src/funcs_CPU.cpp" 2
